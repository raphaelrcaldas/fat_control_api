"""rev

Revision ID: bdcf2902f067
Revises: 
Create Date: 2025-03-23 09:48:40.093513

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'bdcf2902f067'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('posto_grad',
    sa.Column('ant', sa.Integer(), nullable=False),
    sa.Column('short', sa.String(), nullable=False),
    sa.Column('mid', sa.String(), nullable=False),
    sa.Column('long', sa.String(), nullable=False),
    sa.Column('soldo', sa.Float(), nullable=False),
    sa.Column('circulo', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('short'),
    sa.UniqueConstraint('short')
    )
    op.create_table('quads_group',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('short', sa.String(), nullable=False),
    sa.Column('long', sa.String(), nullable=False),
    sa.Column('uae', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('quads_type',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('short', sa.String(), nullable=False),
    sa.Column('long', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['quads_group.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('p_g', sa.String(), nullable=False),
    sa.Column('esp', sa.String(), nullable=True),
    sa.Column('nome_guerra', sa.String(), nullable=False),
    sa.Column('nome_completo', sa.String(), nullable=True),
    sa.Column('id_fab', sa.Integer(), nullable=True),
    sa.Column('saram', sa.Integer(), nullable=False),
    sa.Column('unidade', sa.String(), nullable=False),
    sa.Column('cpf', sa.String(), nullable=True),
    sa.Column('email_fab', sa.String(), nullable=True),
    sa.Column('email_pess', sa.String(), nullable=True),
    sa.Column('nasc', sa.Date(), nullable=True),
    sa.Column('ult_promo', sa.Date(), nullable=True),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('ant_rel', sa.Integer(), nullable=True),
    sa.Column('first_login', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['p_g'], ['posto_grad.short'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('id_fab'),
    sa.UniqueConstraint('saram')
    )
    op.create_table('indisps',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('date_start', sa.Date(), nullable=False),
    sa.Column('date_end', sa.Date(), nullable=False),
    sa.Column('mtv', sa.String(), nullable=False),
    sa.Column('obs', sa.String(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('quads_func',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('func', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['type_id'], ['quads_type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('tripulantes',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('trig', sa.String(length=3), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=False),
    sa.Column('uae', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('quad',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('value', sa.Date(), nullable=True),
    sa.Column('trip_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['trip_id'], ['tripulantes.id'], ),
    sa.ForeignKeyConstraint(['type_id'], ['quads_type.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('trip_funcs',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('trip_id', sa.Integer(), nullable=False),
    sa.Column('func', sa.String(), nullable=False),
    sa.Column('oper', sa.String(), nullable=False),
    sa.Column('proj', sa.String(), nullable=False),
    sa.Column('data_op', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['trip_id'], ['tripulantes.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )

    op.execute("create schema security")
    op.create_table('resources',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='security'
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='security'
    )
    op.create_table('permissions',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('resource_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['resource_id'], ['security.resources.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='security'
    )
    op.create_table('user_roles',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['security.roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='security'
    )
    op.create_table('role_permissions',
    sa.Column('id', sa.Integer(), sa.Identity(always=False), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['security.permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['security.roles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    schema='security'
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('role_permissions', schema='security')
    op.drop_table('user_roles', schema='security')
    op.drop_table('permissions', schema='security')
    op.drop_table('roles', schema='security')
    op.drop_table('resources', schema='security')
    op.execute("drop schema security")

    op.drop_table('trip_funcs')
    op.drop_table('quad')
    op.drop_table('tripulantes')
    op.drop_table('quads_func')
    op.drop_table('indisps')
    op.drop_table('users')
    op.drop_table('quads_type')
    op.drop_table('quads_group')
    op.drop_table('posto_grad')
    # ### end Alembic commands ###
